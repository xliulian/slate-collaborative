"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _automerge = _interopRequireDefault(require("automerge"));

var _automergeEditor = require("./automerge-editor");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * The `withAutomerge` plugin contains core collaboration logic.
 */
var withAutomerge = function withAutomerge(editor, options) {
  var e = editor;
  var onChange = e.onChange;

  var _ref = options || {},
      docId = _ref.docId,
      cursorData = _ref.cursorData,
      preserveExternalHistory = _ref.preserveExternalHistory;

  e.docSet = new _automerge["default"].DocSet();

  var createConnection = function createConnection() {
    if (e.connection) e.connection.close();
    e.connection = _automergeEditor.AutomergeEditor.createConnection(e, function (data) {
      return (//@ts-ignore
        e.send(data)
      );
    });
    e.connection.open();
  };

  createConnection();
  /**
   * Open Automerge Connection
   */

  e.openConnection = function () {
    e.connection.open();
  };
  /**
   * Close Automerge Connection
   */


  e.closeConnection = function () {
    e.connection.close();
  };
  /**
   * Clear cursor data
   */


  e.gabageCursor = function () {
    _automergeEditor.AutomergeEditor.garbageCursor(e, docId);
  };
  /**
   * Editor onChange
   */


  e.onChange = function () {
    var operations = e.operations;

    if (!e.isRemote) {
      _automergeEditor.AutomergeEditor.applySlateOps(e, docId, operations, cursorData);
    }

    onChange();
  };
  /**
   * Receive document value
   */


  e.receiveDocument = function (data) {
    _automergeEditor.AutomergeEditor.receiveDocument(e, docId, data);

    createConnection();
  };
  /**
   * Receive Automerge sync operations
   */


  e.receiveOperation = function (data) {
    if (docId !== data.docId) return;

    _automergeEditor.AutomergeEditor.applyOperation(e, docId, data, preserveExternalHistory);
  };

  return e;
};

var _default = withAutomerge;
exports["default"] = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy93aXRoQXV0b21lcmdlLnRzIl0sIm5hbWVzIjpbIndpdGhBdXRvbWVyZ2UiLCJlZGl0b3IiLCJvcHRpb25zIiwiZSIsIm9uQ2hhbmdlIiwiZG9jSWQiLCJjdXJzb3JEYXRhIiwicHJlc2VydmVFeHRlcm5hbEhpc3RvcnkiLCJkb2NTZXQiLCJBdXRvbWVyZ2UiLCJEb2NTZXQiLCJjcmVhdGVDb25uZWN0aW9uIiwiY29ubmVjdGlvbiIsImNsb3NlIiwiQXV0b21lcmdlRWRpdG9yIiwiZGF0YSIsInNlbmQiLCJvcGVuIiwib3BlbkNvbm5lY3Rpb24iLCJjbG9zZUNvbm5lY3Rpb24iLCJnYWJhZ2VDdXJzb3IiLCJnYXJiYWdlQ3Vyc29yIiwib3BlcmF0aW9ucyIsImlzUmVtb3RlIiwiYXBwbHlTbGF0ZU9wcyIsInJlY2VpdmVEb2N1bWVudCIsInJlY2VpdmVPcGVyYXRpb24iLCJhcHBseU9wZXJhdGlvbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUlBOzs7O0FBVUE7QUFDQTtBQUNBO0FBRUEsSUFBTUEsYUFBYSxHQUFHLFNBQWhCQSxhQUFnQixDQUNwQkMsTUFEb0IsRUFFcEJDLE9BRm9CLEVBR2pCO0FBQ0gsTUFBTUMsQ0FBQyxHQUFHRixNQUFWO0FBREcsTUFHS0csUUFITCxHQUdrQkQsQ0FIbEIsQ0FHS0MsUUFITDs7QUFBQSxhQUtvREYsT0FBTyxJQUFJLEVBTC9EO0FBQUEsTUFLS0csS0FMTCxRQUtLQSxLQUxMO0FBQUEsTUFLWUMsVUFMWixRQUtZQSxVQUxaO0FBQUEsTUFLd0JDLHVCQUx4QixRQUt3QkEsdUJBTHhCOztBQU9ISixFQUFBQSxDQUFDLENBQUNLLE1BQUYsR0FBVyxJQUFJQyxzQkFBVUMsTUFBZCxFQUFYOztBQUVBLE1BQU1DLGdCQUFnQixHQUFHLFNBQW5CQSxnQkFBbUIsR0FBTTtBQUM3QixRQUFJUixDQUFDLENBQUNTLFVBQU4sRUFBa0JULENBQUMsQ0FBQ1MsVUFBRixDQUFhQyxLQUFiO0FBRWxCVixJQUFBQSxDQUFDLENBQUNTLFVBQUYsR0FBZUUsaUNBQWdCSCxnQkFBaEIsQ0FBaUNSLENBQWpDLEVBQW9DLFVBQUNZLElBQUQ7QUFBQSxhQUNqRDtBQUNBWixRQUFBQSxDQUFDLENBQUNhLElBQUYsQ0FBT0QsSUFBUDtBQUZpRDtBQUFBLEtBQXBDLENBQWY7QUFLQVosSUFBQUEsQ0FBQyxDQUFDUyxVQUFGLENBQWFLLElBQWI7QUFDRCxHQVREOztBQVdBTixFQUFBQSxnQkFBZ0I7QUFFaEI7QUFDRjtBQUNBOztBQUVFUixFQUFBQSxDQUFDLENBQUNlLGNBQUYsR0FBbUIsWUFBTTtBQUN2QmYsSUFBQUEsQ0FBQyxDQUFDUyxVQUFGLENBQWFLLElBQWI7QUFDRCxHQUZEO0FBSUE7QUFDRjtBQUNBOzs7QUFFRWQsRUFBQUEsQ0FBQyxDQUFDZ0IsZUFBRixHQUFvQixZQUFNO0FBQ3hCaEIsSUFBQUEsQ0FBQyxDQUFDUyxVQUFGLENBQWFDLEtBQWI7QUFDRCxHQUZEO0FBSUE7QUFDRjtBQUNBOzs7QUFFRVYsRUFBQUEsQ0FBQyxDQUFDaUIsWUFBRixHQUFpQixZQUFNO0FBQ3JCTixxQ0FBZ0JPLGFBQWhCLENBQThCbEIsQ0FBOUIsRUFBaUNFLEtBQWpDO0FBQ0QsR0FGRDtBQUlBO0FBQ0Y7QUFDQTs7O0FBRUVGLEVBQUFBLENBQUMsQ0FBQ0MsUUFBRixHQUFhLFlBQU07QUFDakIsUUFBTWtCLFVBQWUsR0FBR25CLENBQUMsQ0FBQ21CLFVBQTFCOztBQUVBLFFBQUksQ0FBQ25CLENBQUMsQ0FBQ29CLFFBQVAsRUFBaUI7QUFDZlQsdUNBQWdCVSxhQUFoQixDQUE4QnJCLENBQTlCLEVBQWlDRSxLQUFqQyxFQUF3Q2lCLFVBQXhDLEVBQW9EaEIsVUFBcEQ7QUFDRDs7QUFFREYsSUFBQUEsUUFBUTtBQUNULEdBUkQ7QUFVQTtBQUNGO0FBQ0E7OztBQUVFRCxFQUFBQSxDQUFDLENBQUNzQixlQUFGLEdBQW9CLFVBQUFWLElBQUksRUFBSTtBQUMxQkQscUNBQWdCVyxlQUFoQixDQUFnQ3RCLENBQWhDLEVBQW1DRSxLQUFuQyxFQUEwQ1UsSUFBMUM7O0FBRUFKLElBQUFBLGdCQUFnQjtBQUNqQixHQUpEO0FBTUE7QUFDRjtBQUNBOzs7QUFFRVIsRUFBQUEsQ0FBQyxDQUFDdUIsZ0JBQUYsR0FBcUIsVUFBQVgsSUFBSSxFQUFJO0FBQzNCLFFBQUlWLEtBQUssS0FBS1UsSUFBSSxDQUFDVixLQUFuQixFQUEwQjs7QUFFMUJTLHFDQUFnQmEsY0FBaEIsQ0FBK0J4QixDQUEvQixFQUFrQ0UsS0FBbEMsRUFBeUNVLElBQXpDLEVBQStDUix1QkFBL0M7QUFDRCxHQUpEOztBQU1BLFNBQU9KLENBQVA7QUFDRCxDQXBGRDs7ZUFzRmVILGEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQXV0b21lcmdlIGZyb20gJ2F1dG9tZXJnZSdcblxuaW1wb3J0IHsgRWRpdG9yIH0gZnJvbSAnc2xhdGUnXG5cbmltcG9ydCB7IEF1dG9tZXJnZUVkaXRvciB9IGZyb20gJy4vYXV0b21lcmdlLWVkaXRvcidcblxuaW1wb3J0IHsgQ3Vyc29yRGF0YSwgQ29sbGFiQWN0aW9uIH0gZnJvbSAnQHNsYXRlLWNvbGxhYm9yYXRpdmUvYnJpZGdlJ1xuXG5leHBvcnQgaW50ZXJmYWNlIEF1dG9tZXJnZU9wdGlvbnMge1xuICBkb2NJZDogc3RyaW5nXG4gIGN1cnNvckRhdGE/OiBDdXJzb3JEYXRhXG4gIHByZXNlcnZlRXh0ZXJuYWxIaXN0b3J5PzogYm9vbGVhblxufVxuXG4vKipcbiAqIFRoZSBgd2l0aEF1dG9tZXJnZWAgcGx1Z2luIGNvbnRhaW5zIGNvcmUgY29sbGFib3JhdGlvbiBsb2dpYy5cbiAqL1xuXG5jb25zdCB3aXRoQXV0b21lcmdlID0gPFQgZXh0ZW5kcyBFZGl0b3I+KFxuICBlZGl0b3I6IFQsXG4gIG9wdGlvbnM6IEF1dG9tZXJnZU9wdGlvbnNcbikgPT4ge1xuICBjb25zdCBlID0gZWRpdG9yIGFzIFQgJiBBdXRvbWVyZ2VFZGl0b3JcblxuICBjb25zdCB7IG9uQ2hhbmdlIH0gPSBlXG5cbiAgY29uc3QgeyBkb2NJZCwgY3Vyc29yRGF0YSwgcHJlc2VydmVFeHRlcm5hbEhpc3RvcnkgfSA9IG9wdGlvbnMgfHwge31cblxuICBlLmRvY1NldCA9IG5ldyBBdXRvbWVyZ2UuRG9jU2V0KClcblxuICBjb25zdCBjcmVhdGVDb25uZWN0aW9uID0gKCkgPT4ge1xuICAgIGlmIChlLmNvbm5lY3Rpb24pIGUuY29ubmVjdGlvbi5jbG9zZSgpXG5cbiAgICBlLmNvbm5lY3Rpb24gPSBBdXRvbWVyZ2VFZGl0b3IuY3JlYXRlQ29ubmVjdGlvbihlLCAoZGF0YTogQ29sbGFiQWN0aW9uKSA9PlxuICAgICAgLy9AdHMtaWdub3JlXG4gICAgICBlLnNlbmQoZGF0YSlcbiAgICApXG5cbiAgICBlLmNvbm5lY3Rpb24ub3BlbigpXG4gIH1cblxuICBjcmVhdGVDb25uZWN0aW9uKClcblxuICAvKipcbiAgICogT3BlbiBBdXRvbWVyZ2UgQ29ubmVjdGlvblxuICAgKi9cblxuICBlLm9wZW5Db25uZWN0aW9uID0gKCkgPT4ge1xuICAgIGUuY29ubmVjdGlvbi5vcGVuKClcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZSBBdXRvbWVyZ2UgQ29ubmVjdGlvblxuICAgKi9cblxuICBlLmNsb3NlQ29ubmVjdGlvbiA9ICgpID0+IHtcbiAgICBlLmNvbm5lY3Rpb24uY2xvc2UoKVxuICB9XG5cbiAgLyoqXG4gICAqIENsZWFyIGN1cnNvciBkYXRhXG4gICAqL1xuXG4gIGUuZ2FiYWdlQ3Vyc29yID0gKCkgPT4ge1xuICAgIEF1dG9tZXJnZUVkaXRvci5nYXJiYWdlQ3Vyc29yKGUsIGRvY0lkKVxuICB9XG5cbiAgLyoqXG4gICAqIEVkaXRvciBvbkNoYW5nZVxuICAgKi9cblxuICBlLm9uQ2hhbmdlID0gKCkgPT4ge1xuICAgIGNvbnN0IG9wZXJhdGlvbnM6IGFueSA9IGUub3BlcmF0aW9uc1xuXG4gICAgaWYgKCFlLmlzUmVtb3RlKSB7XG4gICAgICBBdXRvbWVyZ2VFZGl0b3IuYXBwbHlTbGF0ZU9wcyhlLCBkb2NJZCwgb3BlcmF0aW9ucywgY3Vyc29yRGF0YSlcbiAgICB9XG5cbiAgICBvbkNoYW5nZSgpXG4gIH1cblxuICAvKipcbiAgICogUmVjZWl2ZSBkb2N1bWVudCB2YWx1ZVxuICAgKi9cblxuICBlLnJlY2VpdmVEb2N1bWVudCA9IGRhdGEgPT4ge1xuICAgIEF1dG9tZXJnZUVkaXRvci5yZWNlaXZlRG9jdW1lbnQoZSwgZG9jSWQsIGRhdGEpXG5cbiAgICBjcmVhdGVDb25uZWN0aW9uKClcbiAgfVxuXG4gIC8qKlxuICAgKiBSZWNlaXZlIEF1dG9tZXJnZSBzeW5jIG9wZXJhdGlvbnNcbiAgICovXG5cbiAgZS5yZWNlaXZlT3BlcmF0aW9uID0gZGF0YSA9PiB7XG4gICAgaWYgKGRvY0lkICE9PSBkYXRhLmRvY0lkKSByZXR1cm5cblxuICAgIEF1dG9tZXJnZUVkaXRvci5hcHBseU9wZXJhdGlvbihlLCBkb2NJZCwgZGF0YSwgcHJlc2VydmVFeHRlcm5hbEhpc3RvcnkpXG4gIH1cblxuICByZXR1cm4gZVxufVxuXG5leHBvcnQgZGVmYXVsdCB3aXRoQXV0b21lcmdlXG4iXX0=